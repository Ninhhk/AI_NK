import streamlit as st
import requests
import json
import time
import os
from datetime import datetime
import sys
from pathlib import Path

# Add the project root to the Python path
sys.path.append(str(Path(__file__).parent.parent.parent))
from frontend.components.system_prompt import system_prompt_ui

# Set page config for better appearance
st.set_page_config(
    page_title="T·∫°o Slide AI",
    page_icon="üéØ",
    layout="wide",
    initial_sidebar_state="expanded"
)

# Load custom CSS
with open('frontend/style.css') as f:
    st.markdown(f'<style>{f.read()}</style>', unsafe_allow_html=True)

# Add custom styles for status and download button
st.markdown("""
    <style>
    .stStatus {
        background-color: var(--card-background);
        border-radius: 10px;
        padding: 1.5rem;
        margin: 1rem 0;
        border: 1px solid rgba(255, 255, 255, 0.1);
    }
    .stStatus > div {
        color: var(--text-primary);
    }
    .stStatus[data-state="complete"] {
        background: linear-gradient(135deg, var(--success-color) 0%, #27ae60 100%);
    }
    .stStatus[data-state="error"] {
        background: linear-gradient(135deg, var(--error-color) 0%, #c0392b 100%);
    }
    .stDownloadButton {
        background: linear-gradient(135deg, var(--accent-color) 0%, var(--primary-color) 100%);
        border-radius: 10px;
        padding: 1rem;
        margin: 1rem 0;
        text-align: center;
        transition: all 0.3s ease;
    }
    .stDownloadButton:hover {
        transform: translateY(-2px);
        box-shadow: 0 4px 12px rgba(52, 152, 219, 0.3);
    }
    .stDownloadButton > button {
        background: transparent !important;
        border: none !important;
        color: white !important;
        font-weight: 600 !important;
        padding: 0.5rem 1rem !important;
        border-radius: 5px !important;
        transition: all 0.3s ease !important;
    }
    .stDownloadButton > button:hover {
        background: rgba(255, 255, 255, 0.1) !important;
    }
    </style>
""", unsafe_allow_html=True)

def generate_slides(topic: str, num_slides: int, model_name: str = None, document_files=None, system_prompt: str = None) -> dict:
    """G·ª≠i n·ªôi dung l√™n backend ƒë·ªÉ t·∫°o slide v·ªõi nhi·ªÅu t√†i li·ªáu."""
    # Prepare files list for multi-file upload under 'documents'
    files = []
    if document_files:
        for f in document_files:
            files.append((
                "documents",
                (f.name, f.getvalue(), f.type)
            ))
    data = {
        "topic": topic, 
        "num_slides": num_slides
    }
    
    # Add model_name if specified
    if model_name:
        data["model_name"] = model_name
        
    # Add system_prompt if specified
    if system_prompt:
        data["system_prompt"] = system_prompt
        
    response = requests.post(
        "http://localhost:8000/api/slides/generate",
        files=files or None,
        data=data
    )
    response.raise_for_status()
    return response.json()

def get_available_models() -> list:
    """L·∫•y danh s√°ch c√°c model c√≥ s·∫µn t·ª´ backend."""
    try:
        response = requests.get("http://localhost:8000/api/ollama/models")
        response.raise_for_status()
        return response.json().get("models", [])
    except Exception as e:
        st.error(f"Error fetching models: {e}")
        return []
    
def get_current_model() -> str:
    """L·∫•y model hi·ªán t·∫°i ƒë∆∞·ª£c s·ª≠ d·ª•ng ƒë·ªÉ t·∫°o slide."""
    try:
        response = requests.get("http://localhost:8000/api/slides/current-model")
        response.raise_for_status()
        return response.json().get("model_name", "")
    except Exception as e:
        print(f"Error fetching current model: {e}")
        return ""

def get_system_prompt() -> str:
    """L·∫•y system prompt hi·ªán t·∫°i cho t·∫°o slide."""
    try:
        response = requests.get("http://localhost:8000/api/slides/system-prompt")
        response.raise_for_status()
        return response.json().get("system_prompt", "")
    except Exception as e:
        print(f"Error fetching system prompt: {e}")
        return ""

def set_system_prompt(prompt: str) -> bool:
    """ƒê·∫∑t system prompt cho t·∫°o slide."""
    try:
        response = requests.post(
            "http://localhost:8000/api/slides/system-prompt",
            data={"system_prompt": prompt}
        )
        response.raise_for_status()
        return True
    except Exception as e:
        print(f"Error setting system prompt: {e}")
        return False

# Header section with animated logo and title
col1, col2, col3 = st.columns([1,2,1])
with col2:
    st.markdown("""
        <div class="fade-in">
            <h1 style='text-align: center; color: var(--primary-color); font-size: 2.5em; margin-bottom: 0.5em;'>
                üéØ T·∫°o Slide
            </h1>
            <h3 style='text-align: center; color: var(--text-secondary); font-size: 1.2em;'>
                T·∫°o B√†i Thuy·∫øt Tr√¨nh Chuy√™n Nghi·ªáp V·ªõi AI
            </h3>
        </div>
    """, unsafe_allow_html=True)

# Main content area with animated separator
st.markdown("""
    <div style='height: 2px; background: linear-gradient(90deg, transparent, var(--primary-color), transparent);'></div>
""", unsafe_allow_html=True)

# Get available models for dropdown
available_models = get_available_models()
current_model = get_current_model()

# Model selection
with st.expander("ü§ñ L·ª±a Ch·ªçn Model AI", expanded=False):
    st.markdown("""
        Ch·ªçn model AI n√†o ƒë·ªÉ s·ª≠ d·ª•ng cho t·∫•t c·∫£ c√°c t√≠nh nƒÉng c·ªßa ·ª©ng d·ª•ng bao g·ªìm t·∫°o slide, ph√¢n t√≠ch t√†i li·ªáu v√† t·∫°o quiz.
        M·ªçi thay ƒë·ªïi t·∫°i ƒë√¢y s·∫Ω √°p d·ª•ng cho to√†n b·ªô ·ª©ng d·ª•ng.
        B·∫°n c√≥ th·ªÉ qu·∫£n l√Ω c√°c model trong trang Qu·∫£n L√Ω Model.
    """)
    
    # Create a list of model names for the dropdown
    model_names = [model.get('name') for model in available_models]
      # Only show dropdown if there are models available
    if model_names:
        selected_model = st.selectbox(
            "Ch·ªçn Model AI To√†n C·ª•c",
            options=model_names,
            index=model_names.index(current_model) if current_model in model_names else 0,
            help="Ch·ªçn model AI ƒë·ªÉ s·ª≠ d·ª•ng cho t·∫•t c·∫£ t√≠nh nƒÉng (s·∫Ω ƒë∆∞·ª£c √°p d·ª•ng to√†n c·ª•c)"
        )
        st.info(f"ƒêang s·ª≠ d·ª•ng model: {selected_model} cho t·∫•t c·∫£ t√≠nh nƒÉng bao g·ªìm ph√¢n t√≠ch t√†i li·ªáu v√† t·∫°o quiz")
    else:
        st.warning("Kh√¥ng c√≥ model n√†o kh·∫£ d·ª•ng. Vui l√≤ng truy c·∫≠p trang Qu·∫£n L√Ω Model ƒë·ªÉ th√™m model.")
        selected_model = None

# Input section with better layout
col1, col2 = st.columns([2,1])

with col1:
    topic = st.text_input(
        "üìù Ch·ªß ƒê·ªÅ C·ªßa B·∫°n",
        placeholder="Nh·∫≠p ch·ªß ƒë·ªÅ b·∫°n mu·ªën t·∫°o slide...",
        help="Nh·∫≠p ch·ªß ƒë·ªÅ r√µ r√†ng ƒë·ªÉ AI t·∫°o slide ph√π h·ª£p"
    )

with col2:
    num_slides = st.number_input(
        "üìä S·ªë L∆∞·ª£ng Slide",
        min_value=1,
        max_value=20,
        value=5,
        help="Ch·ªçn s·ªë l∆∞·ª£ng slide b·∫°n mu·ªën t·∫°o (t·ªëi ƒëa 20 slide)"
    )

# System prompt section
with st.expander("üí¨ C√†i ƒê·∫∑t System Prompt", expanded=False):
    # Get current system prompt
    current_system_prompt = get_system_prompt()
    
    # Add tabs for different sections
    prompt_tab, examples_tab, help_tab = st.tabs(["Ch·ªânh S·ª≠a Prompt", "Prompt M·∫´u", "Tr·ª£ Gi√∫p"])
    with prompt_tab:
        # Use the reusable system prompt UI component
        custom_system_prompt = system_prompt_ui(default_prompt=current_system_prompt, key_prefix="slide_gen")
          # Save button for system prompt
        if st.button("üíæ L∆∞u System Prompt"):
            if set_system_prompt(custom_system_prompt):
                st.success("‚úÖ System prompt ƒë√£ ƒë∆∞·ª£c l∆∞u th√†nh c√¥ng!")
            else:
                st.error("‚ùå Kh√¥ng th·ªÉ l∆∞u system prompt. Vui l√≤ng th·ª≠ l·∫°i.")
                  # Use in current session only
        if 'use_custom_prompt' not in st.session_state:
            st.session_state['use_custom_prompt'] = False
            
        st.session_state['use_custom_prompt'] = st.checkbox(
            "S·ª≠ d·ª•ng prompt t√πy ch·ªânh ch·ªâ cho phi√™n n√†y (kh√¥ng l∆∞u)",
            value=st.session_state['use_custom_prompt'],
            key="slide_gen_use_custom_prompt",
            help="√Åp d·ª•ng prompt t√πy ch·ªânh ch·ªâ cho phi√™n n√†y m√† kh√¥ng l∆∞u l√†m m·∫∑c ƒë·ªãnh"
        )
    with examples_tab:
        st.markdown("### Prompt M·∫´u")
        st.markdown("Nh·∫•p v√†o b·∫•t k·ª≥ v√≠ d·ª• n√†o ƒë·ªÉ s·ª≠ d·ª•ng n√≥:")
        
        # Technical presentation example
        if st.button("B√†i Thuy·∫øt Tr√¨nh K·ªπ Thu·∫≠t"):
            example_prompt = """B·∫°n l√† chuy√™n gia thuy·∫øt tr√¨nh k·ªπ thu·∫≠t. T·∫°o slide v·ªõi n·ªôi dung ch√≠nh x√°c, k·ªπ thu·∫≠t. 
S·ª≠ d·ª•ng ng√¥n ng·ªØ trang tr·ªçng, bao g·ªìm thu·∫≠t ng·ªØ k·ªπ thu·∫≠t ph√π h·ª£p, v√† t·ªï ch·ª©c th√¥ng tin ph·ª©c t·∫°p 
theo th·ª© b·∫≠c. M·ªói slide n√™n t·∫≠p trung v√†o m·ªôt kh√°i ni·ªám k·ªπ thu·∫≠t duy nh·∫•t v·ªõi chi ti·∫øt h·ªó tr·ª£.
Gi·ªõi h·∫°n m·ªói slide t·ªëi ƒëa 5 ƒëi·ªÉm ch√≠nh, m·ªói ƒëi·ªÉm c√≥ 7-10 t·ª´."""
            st.session_state['custom_system_prompt'] = example_prompt
        st.rerun()
        
        # Educational presentation example
        if st.button("B√†i Thuy·∫øt Tr√¨nh Gi√°o D·ª•c"):
            example_prompt = """B·∫°n l√† chuy√™n gia gi√°o d·ª•c t·∫°o slide cho h·ªçc sinh. Tr√¨nh b√†y th√¥ng tin m·ªôt c√°ch 
r√µ r√†ng, h·∫•p d·∫´n v·ªõi l·ªùi gi·∫£i th√≠ch ƒë∆°n gi·∫£n v·ªÅ c√°c kh√°i ni·ªám ph·ª©c t·∫°p. Bao g·ªìm c√¢u h·ªèi 
g·ª£i suy nghƒ© trong m·ªôt s·ªë slide, v√† t·ªï ch·ª©c n·ªôi dung theo tr√¨nh t·ª± h·ªçc t·∫≠p logic t·ª´ 
c∆° b·∫£n ƒë·∫øn n√¢ng cao. S·ª≠ d·ª•ng ng√¥n ng·ªØ th√¢n thi·ªán, d·ªÖ ti·∫øp c·∫≠n."""
            st.session_state['custom_system_prompt'] = example_prompt
        st.rerun()
        
        # Business presentation example
        if st.button("B√†i Thuy·∫øt Tr√¨nh Kinh Doanh"):
            example_prompt = """B·∫°n l√† chuy√™n gia thuy·∫øt tr√¨nh kinh doanh t·∫≠p trung v√†o slide thuy·∫øt ph·ª•c, h∆∞·ªõng h√†nh ƒë·ªông.
T·∫°o n·ªôi dung l√†m n·ªïi b·∫≠t c√°c ch·ªâ s·ªë kinh doanh ch√≠nh, th√¥ng tin chi·∫øn l∆∞·ª£c, v√† 
khuy·∫øn ngh·ªã r√µ r√†ng. S·ª≠ d·ª•ng ng√¥n ng·ªØ chuy√™n nghi·ªáp, nh·∫•n m·∫°nh l·ª£i √≠ch v√† t√°c ƒë·ªông, v√† 
ƒë·∫£m b·∫£o m·ªói slide ƒë√≥ng g√≥p v√†o c√¢u chuy·ªán kinh doanh thuy·∫øt ph·ª•c. Bao g·ªìm l·ªùi k√™u g·ªçi 
h√†nh ƒë·ªông r√µ r√†ng trong k·∫øt lu·∫≠n."""
            st.session_state['custom_system_prompt'] = example_prompt
        st.rerun()
    
    with help_tab:
        st.markdown("### M·∫πo Vi·∫øt System Prompt Hi·ªáu Qu·∫£")
        st.markdown("""
        1. **C·ª• th·ªÉ v·ªÅ ƒë·ªãnh d·∫°ng**: ƒê·ªÅ c·∫≠p s·ªë ƒëi·ªÉm ch√≠nh m·ªói slide ho·∫∑c s·ªë t·ª´ m·ªói ƒëi·ªÉm
        2. **X√°c ƒë·ªãnh ƒë·ªëi t∆∞·ª£ng**: N√™u r√µ b√†i thuy·∫øt tr√¨nh d√†nh cho ai
        3. **ƒê·∫∑t gi·ªçng ƒëi·ªáu**: Ch·ªâ ra b·∫°n mu·ªën ng√¥n ng·ªØ trang tr·ªçng, th√¢n thi·ªán, k·ªπ thu·∫≠t, hay ƒë∆°n gi·∫£n
        4. **H∆∞·ªõng d·∫´n c·∫•u tr√∫c**: G·ª£i √Ω c√°ch t·ªï ch·ª©c th√¥ng tin
        5. **Bao g·ªìm chuy√™n m√¥n**: Th√™m quy t·∫Øc c·ª• th·ªÉ ph√π h·ª£p v·ªõi ch·ªß ƒë·ªÅ c·ªßa b·∫°n
        
        ƒê·ªÉ ƒë∆∞·ª£c h∆∞·ªõng d·∫´n chi ti·∫øt h∆°n, xem [H∆∞·ªõng D·∫´n System Prompt](https://github.com/your-username/AI_NVCB/blob/main/docs/system_prompt_guide.md).
        """)

# Reference document upload section supporting multiple files
st.markdown("""
    <div class="card fade-in">
        <h3 style='color: var(--text-secondary); margin-top: 0; display: flex; align-items: center; gap: 0.5em;'>
            üìÑ T√†i Li·ªáu Tham Kh·∫£o (t√πy ch·ªçn)
        </h3>
    </div>
""", unsafe_allow_html=True)
document_files = st.file_uploader(
    "T·∫£i l√™n m·ªôt ho·∫∑c nhi·ªÅu t√†i li·ªáu ƒë·ªÉ AI tham kh·∫£o",
    type=["pdf", "docx", "txt"],
    accept_multiple_files=True,
    help="T·∫£i l√™n t√†i li·ªáu ƒë·ªÉ AI tham kh·∫£o khi t·∫°o slide. H·ªó tr·ª£ PDF, DOCX v√† TXT"
)
if document_files:
    for doc in document_files:
        st.success(f"ƒê√£ t·∫£i l√™n: {doc.name}")

# Generate button with custom styling
if st.button("üöÄ T·∫°o Slide", type="primary"):
    if not topic:
        st.error("‚ö†Ô∏è Vui l√≤ng nh·∫≠p ch·ªß ƒë·ªÅ tr∆∞·ªõc.")
    else:
        with st.status("üîÑ ƒêang t·∫°o slide...", expanded=True) as status:
            try:
                start_time = time.time()
                # Include selected model in the generation request
                result = generate_slides(
                    topic=topic, 
                    num_slides=num_slides, 
                    model_name=selected_model if 'selected_model' in locals() else None,
                    document_files=document_files,
                    system_prompt=st.session_state.get('slide_gen_system_prompt') if st.session_state.get('use_custom_prompt', False) else None
                )
                
                # Generate filename based on topic and timestamp
                timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
                safe_topic = "".join(c for c in topic if c.isalnum() or c in (' ', '-', '_')).strip()
                safe_topic = safe_topic.replace(' ', '_')
                filename = f"{safe_topic}_{timestamp}.pptx"
                
                # Get the output directory path
                output_dir = os.path.join("output", "slides")
                pptx_path = os.path.join(output_dir, filename)
                
                # Wait a short time for the file to be created
                max_attempts = 10
                file_found = False
                
                for attempt in range(max_attempts):
                    if os.path.exists(pptx_path):
                        file_found = True
                        break
                    time.sleep(0.5)  # Wait 0.5 seconds between checks
                if file_found:
                    status.update(label="‚úÖ Ho√†n th√†nh!", state="complete", expanded=False)
                    
                    # Show download button with better styling
                    st.markdown("""
                        <div class="stDownloadButton">
                    """, unsafe_allow_html=True)
                    
                    with open(pptx_path, "rb") as f:
                        file_data = f.read()
                        
                    st.download_button(
                        label="üì• T·∫£i Xu·ªëng PowerPoint",
                        data=file_data,
                        file_name=filename,
                        mime="application/vnd.openxmlformats-officedocument.presentationml.presentation"
                    )
                    
                    st.markdown("</div>", unsafe_allow_html=True)
                    
                    # Performance metrics with better styling
                    st.markdown(f"""
                        <div class="card fade-in" style='margin-top: 1rem;'>
                            <p style='margin: 0; color: var(--text-primary);'>
                                <strong>‚è±Ô∏è Th·ªùi Gian Th·ª±c Hi·ªán:</strong> {time.time() - start_time:.2f} gi√¢y
                            </p>
                        </div>
                    """, unsafe_allow_html=True)
                else:
                    status.update(label="‚ö†Ô∏è Slide ƒë√£ ƒë∆∞·ª£c t·∫°o nh∆∞ng t√™n file c√≥ th·ªÉ qu√° d√†i ƒë·ªÉ hi·ªÉn th·ªã, t√¨m file trong /output/slides", state="error", expanded=False)
                    st.error(f"‚ö†Ô∏è Kh√¥ng th·ªÉ t√¨m th·∫•y file {filename} do t√™n file qu√° d√†i. Vui l√≤ng t√¨m file trong /output/slides.")
                
            except Exception as e:
                status.update(label="‚ùå L·ªói", state="error", expanded=False)
                st.error(f"‚ö†Ô∏è ƒê√£ x·∫£y ra l·ªói: {e}")

# Footer with gradient separator
st.markdown("""
    <div style='height: 2px; background: linear-gradient(90deg, transparent, var(--primary-color), transparent);'></div>
    <div class="footer fade-in">
        <p style='margin: 0.5em 0;'>ƒê∆∞·ª£c H·ªó Tr·ª£ B·ªüi C√¥ng Ngh·ªá AI | ƒê∆∞·ª£c T·∫°o V·ªõi ‚ù§Ô∏è</p>
    </div>
""", unsafe_allow_html=True)
