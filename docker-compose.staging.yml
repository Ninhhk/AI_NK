# Staging docker-compose for pre-production testing
version: '3.8'

services:
  backend:
    build:
      context: .
      target: production
    ports:
      - "8000:8000"
    environment:
      - API_BASE_URL=http://localhost:8000
      - ENVIRONMENT=staging
      - REDIS_URL=redis://redis:6379
      - DATABASE_URL=postgresql://ai_nvcb_staging:staging_secure_password_2024@postgres:5432/ai_nvcb_staging
      - DEBUG=false
      - LOG_LEVEL=info
      - SECRET_KEY=staging_secret_key_2024_secure
      - ADMIN_PASSWORD=staging_admin_2024
    volumes:
      - ./storage:/app/storage
      - ./output:/app/output
      - ./logs:/app/logs
    depends_on:
      - redis
      - postgres
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  frontend:
    build:
      context: .
      target: production
    ports:
      - "8501:8501"
    environment:
      - API_BASE_URL=http://backend:8000
      - ENVIRONMENT=staging
    depends_on:
      - backend
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8501/_stcore/health"]
      interval: 60s
      timeout: 15s
      retries: 3
      start_period: 60s
    command: poetry run streamlit run frontend/app.py --server.port 8501 --server.address 0.0.0.0

  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 5s
      retries: 3

  postgres:
    image: postgres:15-alpine
    environment:
      POSTGRES_DB: ai_nvcb_staging
      POSTGRES_USER: ai_nvcb_staging
      POSTGRES_PASSWORD: staging_secure_password_2024
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ai_nvcb_staging -d ai_nvcb_staging"]
      interval: 30s
      timeout: 10s
      retries: 3

volumes:
  redis_data:
    driver: local
  postgres_data:
    driver: local

networks:
  default:
    driver: bridge
